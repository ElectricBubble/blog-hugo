<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 雷系泡泡</title>
    <link>http://leixipaopao.com/tags/golang/</link>
    <description>Recent content in Golang on 雷系泡泡</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 06 Aug 2020 08:20:00 +0800</lastBuildDate>
    
	<atom:link href="http://leixipaopao.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[guia2] Golang 版 appium-uiautomator2-server 客户端库</title>
      <link>http://leixipaopao.com/posts/0007-uia2-guia2.md/</link>
      <pubDate>Thu, 06 Aug 2020 08:20:00 +0800</pubDate>
      
      <guid>http://leixipaopao.com/posts/0007-uia2-guia2.md/</guid>
      <description>接着上次的 IOS 版的 gwda 这次把拖更的 Android 版也补上 项目地址: https://github.com/electricbubble/guia2 使用 Golang 实现的 appium-uiautomator2-server 客户端库 虽然大部分常用操作都支持了，但是有些操作，比如 打开 App 并没有默认提供</description>
    </item>
    
    <item>
      <title>[gwda] Golang 版 WebDriverAgent 客户端库</title>
      <link>http://leixipaopao.com/posts/0006-wda-gwda/</link>
      <pubDate>Wed, 13 May 2020 14:01:28 +0800</pubDate>
      
      <guid>http://leixipaopao.com/posts/0006-wda-gwda/</guid>
      <description>总算是把这个项目补完了 项目地址：https://github.com/electricbubble/gwda 使用 Golang 实现了 appium/WebDriverAgent 的客户端库 appium 其实也</description>
    </item>
    
    <item>
      <title>使用 Golang 编写的 Web版 Nmon Analyser</title>
      <link>http://leixipaopao.com/posts/0002-golang-nmon-analyser/</link>
      <pubDate>Tue, 31 Mar 2020 15:40:39 +0800</pubDate>
      
      <guid>http://leixipaopao.com/posts/0002-golang-nmon-analyser/</guid>
      <description>模仿 Nmon-Analyser（Excel版本）的 Web 版本。 原本做好了就放 线上 没咋去管了，今天才发现原来线上的版本还引用了一个访问很慢的 css 文件</description>
    </item>
    
    <item>
      <title>Golang 判断系统是 32/64-bit</title>
      <link>http://leixipaopao.com/posts/0001-golang-how-to-know-the-32-or-64-bit/</link>
      <pubDate>Thu, 26 Mar 2020 18:10:56 +0800</pubDate>
      
      <guid>http://leixipaopao.com/posts/0001-golang-how-to-know-the-32-or-64-bit/</guid>
      <description>bit := 32 &amp;lt;&amp;lt; (^uint(0) &amp;gt;&amp;gt; 63) 在 64位 的系统中 bit 的值为 64 在 32位 的系统中 bit 的值为 32 64-bit 32-bit 32 &amp;lt;&amp;lt; (^uint(0) &amp;gt;&amp;gt; 63) 64 32 ^uint(0) 二进制的值 64个1 32个1 ^uint(0) &amp;gt;&amp;gt; 63 二进制的值 1 0 32 &amp;lt;&amp;lt; 1 32</description>
    </item>
    
  </channel>
</rss>